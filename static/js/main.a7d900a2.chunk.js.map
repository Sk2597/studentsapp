{"version":3,"sources":["students.js","components/SearchBox.js","components/Column.js","components/CheckBox.js","components/Scroll.js","components/ColumnFilter.js","components/StudentList.js","containers/App.js","reportWebVitals.js","index.js"],"names":["students","id","name","branch","percentage","useStyles","makeStyles","theme","searchInput","marginTop","spacing","width","SearchBox","searchchange","other","classes","className","TextField","variant","placeholder","onChange","COLUMNS","Header","accessor","disableFilters","CheckBox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","Scroll","props","style","overflow","border","height","children","ColumnFilter","column","filterValue","setFilter","value","e","target","pageContent","margin","padding","table","fontWeight","color","palette","text","primary","backgroundColor","light","fontSize","cursor","StudentList","columns","useMemo","defaultColumn","Filter","useState","studentData","setData","tableInstance","useTable","data","useFilters","useRowSelect","hooks","visibleColumns","push","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","Paper","Grid","container","justify","IconButton","aria-label","onClick","Table","stickyHeader","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","headers","TableCell","getHeaderProps","render","canFilter","TableBody","getRowProps","cells","cell","getCellProps","Button","size","rowsSelected","original","updateSelectedRows","App","onSearchChange","event","setState","searchfield","state","this","filteredStudents","filter","student","toLowerCase","includes","InputProps","startAdornment","InputAdornment","position","Search","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a7d900a2.chunk.js","sourcesContent":["export const students = [\n  {\n    id: 1,\n    name: 'Monica',\n    branch: 'Computer Science',\n    percentage: '95'\n  },\n  {\n    id: 2,\n    name: 'Rachel',\n    branch: 'Electrical',\n    percentage: '87'\n  },\n  {\n    id: 3,\n    name: 'Phoebe',\n    branch: 'Mechanical',\n    percentage: '91'\n  },\n  {\n    id: 4,\n    name: 'Joey',\n    branch: 'Electronics',\n    percentage: '85'\n  },\n  {\n    id: 5,\n    name: 'Chandler',\n    branch: 'IT',\n    percentage: '93'\n  },\n  {\n    id: 6,\n    name: 'Ross',\n    branch: 'Civil',\n    percentage: '95'\n  },\n  {\n    id: 7,\n    name: 'Harry',\n    branch: 'Chemical',\n    percentage: '86'\n  },\n  {\n    id: 8,\n    name: 'Hermoine',\n    branch: 'Aerospace',\n    percentage: '97'\n  },\n  {\n    id: 9,\n    name: 'Ron',\n    branch: 'Civil',\n    percentage: '82'\n  },\n  {\n    id: 10,\n    name: 'Hagrid',\n    branch: 'Mining',\n    percentage: '84'\n  },\n \n];\n","import React from 'react';\nimport { TextField,makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    searchInput: {\n        marginTop: theme.spacing(3),\n        width: '50%'\n    },\n}))\n\nconst SearchBox = ({searchchange,...other}) => {\n    const classes = useStyles();\n    return (\n        <div className = 'pa2'>\n           <TextField\n                className={classes.searchInput}\n                variant=\"outlined\"\n                placeholder = 'Search Student'\n                onChange = {searchchange}\n                {...other}\n           />\n        </div>    \n\n    );\n}\n\nexport default SearchBox;\n\n\n\n\n","\nexport const COLUMNS = [\n    {\n        Header : 'Id',\n        accessor : 'id',\n        disableFilters : true\n    },\n    {\n        Header : 'Name',\n        accessor : 'name',\n    },\n    {\n        Header : 'Branch',\n        accessor : 'branch',\n    },\n    {\n        Header : 'Percentage',\n        accessor : 'percentage',\n        disableFilters : true,\n        \n    },\n]","import React from 'react'\n\nexport const CheckBox = React.forwardRef(({indeterminate, ...rest }, ref) => {\n    const defaultRef = React.useRef()\n    const resolvedRef = ref || defaultRef\n\n    React.useEffect(() => {\n        resolvedRef.current.indeterminate = indeterminate\n    },[resolvedRef, indeterminate])\n\n    return (\n        <>\n         <input type = 'checkbox' ref = {resolvedRef} {...rest} />\n        </> \n\n    )\n})\n\nexport default CheckBox","import React from 'react';\n\n//props state children\n\nconst Scroll = (props) => {\n    return(\n        <div style = {{overflow: 'scroll', border: '1px solid black', height: '400px'}}>\n            {props.children}\n        </div>\n    ); \n\n};\n\nexport default Scroll;","import React from 'react'\nimport {TextField} from '@material-ui/core';\n\nexport const ColumnFilter = ({column}) => {\n    const {filterValue, setFilter} = column\n   \n    return (\n        <div>\n            <TextField value= {filterValue || ''}\n                onChange={(e) => setFilter(e.target.value)}\n                variant=\"outlined\"\n                placeholder = 'Search'/>\n            \n        </div> \n    )\n}\n\nexport default ColumnFilter\n","import React,{useMemo,useState,useEffect} from 'react'\nimport { Paper,makeStyles,TableBody, TableCell, TableRow, TableHead,  Table} from '@material-ui/core'\nimport {useTable, useRowSelect, useFilters} from 'react-table'\nimport {COLUMNS} from './Column'\nimport './table.css'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport CheckBox from './CheckBox'\nimport Scroll from './Scroll'\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport IconButton from '@material-ui/core/IconButton';\nimport ColumnFilter from './ColumnFilter'\n\nconst useStyles = makeStyles(theme => ({\n    pageContent: {\n        margin: theme.spacing(5),\n        padding: theme.spacing(3)\n    },\n\n    margin: {\n        margin: theme.spacing(2),\n      },\n\n\n  table: {\n    '& thead th': {\n        fontWeight: '600',\n        color: theme.palette.text.primary,\n        backgroundColor: theme.palette.primary.light,\n        fontSize: '1.0rem',\n    },\n    '& tbody td': {\n        fontWeight: '300',\n    },\n    '& tbody tr:hover': {\n        backgroundColor: '#e9e1fc',\n        cursor: 'pointer',\n    },\n\n},\n}))\n\n\n\nexport const StudentList = ({students}) => {\n\n    const classes = useStyles();\n\n    const columns = useMemo(() => COLUMNS,[])\n    // const data = useMemo(() => students,[])\n    const defaultColumn = useMemo(() => {\n        return {Filter:ColumnFilter}\n    },[])\n\n    const[studentData,setData] = useState(students) \n\n    useEffect(() => {\n        setData(students);\n      }, [students]);\n\n    // console.log('data',studentData)\n\n    const updateSelectedRows = (selectedFlatRows) => {\n        // debugger;\n        // let oldStudentData = [...studentData];\n        // console.log('oldStudentData',oldStudentData)\n        var rowsSelected = selectedFlatRows.map((row) => row.original);\n        var newStudentData = rowsSelected\n        // console.log('rowsSelected',rowsSelected)\n        // console.log('newStudentData',newStudentData)\n        setData(newStudentData)\n        // console.log('Updated stadent data',newStudentData)  \n      };\n    \n    const tableInstance = useTable({\n        columns,\n        data : studentData,\n        defaultColumn,\n    },   \n    useFilters,\n    useRowSelect,\n        (hooks) => {\n             hooks.visibleColumns.push((columns) => {\n                  return [\n\n                    ...columns,\n                      {\n                        id : 'selection',\n\n                        Header : ({getToggleAllRowsSelectedProps}) => (\n                           <CheckBox {...getToggleAllRowsSelectedProps()}/>\n                        ),\n                        Cell : ({row}) => (\n                          <CheckBox {...row.getToggleRowSelectedProps()}/>\n                        ),\n                      },\n            ]\n        })\n    })\n\n    const {getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, selectedFlatRows} = tableInstance\n\n    const test1 = () => {\n    // console.log(\"test from filter\");\n    };  \n\n    return (\n        <Paper className={classes.pageContent}> \n         <Grid container justify=\"flex-end\">\n         <IconButton aria-label=\"filter list\" onClick={test1}>\n            <FilterListIcon />\n          </IconButton>\n        </Grid>  \n        <Scroll>\n        <Table {...getTableProps()} className = {classes.table} stickyHeader aria-label=\"sticky table\">\n            <TableHead>{\n                headerGroups.map((headerGroup) => (\n                    <TableRow {...headerGroup.getHeaderGroupProps()}>\n                        {\n                            headerGroup.headers.map((column) => (\n                                <TableCell {...column.getHeaderProps()}>{column.render('Header')}\n                                <div>{column.canFilter?column.render('Filter'):null}</div>\n                                </TableCell>\n                            ))\n                        }\n                         \n                    </TableRow>\n\n                ))\n                }\n               \n\n            </TableHead>\n\n            <TableBody {...getTableBodyProps()}>\n                {\n                    rows.map((row) => {\n                        prepareRow(row)\n                        return(\n                            <TableRow {...row.getRowProps()}>                             \n                                {\n                                   \n                                    row.cells.map((cell) => {\n                                       return <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>\n\n                                    })\n                                   \n                                }\n                                \n                             </TableRow>\n\n                        )\n                    })\n                }\n               \n\n            </TableBody>\n        </Table>\n        </Scroll>  \n       \n\n        <Grid container justify=\"flex-end\">\n            <Button variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.margin} onClick={()=>updateSelectedRows(selectedFlatRows)}>\n            Next\n            </Button>\n        </Grid>\n\n        {/* <pre>\n                <code>\n                    {JSON.stringify(\n                        {\n                         selectedFlatRows : selectedFlatRows.map((row) => row.original)\n                        },\n                        console.log(\"Selected Rows\",selectedFlatRows),\n                        null,\n                        2\n                    )}\n                </code>\n            </pre> */}\n        </Paper>\n    )\n}\n\n\nexport default StudentList\n\n       ","import React, {Component} from 'react';\nimport {students} from '../students';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport { Search } from \"@material-ui/icons\";\nimport { InputAdornment } from '@material-ui/core';\nimport StudentList from '../components/StudentList';\n\nclass App extends Component {\n\n    constructor(){\n        super();\n        this.state = {\n            students : students,\n            // students : [], for api call\n            searchfield : ''\n        }\n    }\n\n    onSearchChange = (event) => {\n       this.setState({searchfield: event.target.value})\n    }\n\n    render() {\n\n        const {students,searchfield} = this.state\n        const filteredStudents = students.filter(student => {\n            return student.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return (\n            <div className = 'tc'>\n                <SearchBox \n                InputProps={{\n                    startAdornment: (<InputAdornment position=\"start\">\n                        <Search />\n                    </InputAdornment>)\n                }}\n                searchchange = {this.onSearchChange}/>\n              \n                <StudentList students = {filteredStudents}/>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n \n    <App />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}